
version 6.0

set nofixendofline

"enable mouse support
set mouse=a

set runtimepath+=/etc/vim,~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" Plugins
call plug#begin('~/.vim/plugged')
    " Theme stuff
    Plug 'vim-airline/vim-airline-themes'
    Plug 'vim-airline/vim-airline'
    Plug 'altercation/vim-colors-solarized'
    Plug 'lrustand/base16-vim'

    " Tmux stuff
    Plug 'roxma/vim-tmux-clipboard'
    Plug 'lrustand/vim-tmux-navigator'

    " Completion stuff
    Plug 'xavierd/clang_complete'
    Plug 'ervandew/supertab'
    Plug 'folke/which-key.nvim', { 'branch': 'main' }

    " Undo tree
    Plug 'simnalamburt/vim-mundo'

    Plug 'lrustand/vim-maximizer'

    " Syntax
    Plug 'sirtaj/vim-openscad'
    Plug 'sheerun/vim-polyglot'
    Plug 'PotatoesMaster/i3-vim-syntax'

    " FZF
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'

    " Ag
    Plug 'rking/ag.vim'

    " Latex
    Plug 'xuhdev/vim-latex-live-preview'

    " Git (TODO do we need both?)
    Plug 'airblade/vim-gitgutter'
    Plug 'tpope/vim-fugitive'

    " Nerdtree
    Plug 'scrooloose/nerdtree'
    "Plug 'jistr/vim-nerdtree-tabs'

    " Other, TODO needs sorting and cleaning
    Plug 'neovim/python-client'
    Plug 'majutsushi/tagbar'
    Plug 'xolox/vim-misc'
    Plug 'kshenoy/vim-signature'
    Plug 'etdev/vim-hexcolor'
    Plug 'scrooloose/nerdcommenter'
    Plug 'terryma/vim-multiple-cursors'
    Plug 'ntpeters/vim-better-whitespace'
call plug#end()

nnoremap <F5> :MundoToggle<CR>:call s:MundoPython('MundoRenderGraph()')<CR>
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:clang_library_path='/usr/lib/libclang.so'
let g:clang_use_library=1
let g:clang_complete_auto=0
let g:SuperTabDefaultCompletionType = 'context'
set completeopt=menu,menuone,longest
set pumheight=15


" Maximize current pane with <C-w>
let g:maximizer_set_default_mapping = 0
nnoremap <silent><C-w>z :MaximizerToggle<CR>
vnoremap <silent><C-w>z :MaximizerToggle<CR>gv
inoremap <silent><C-w>z <C-o>:MaximizerToggle<CR>
tnoremap <silent><C-w>z <Cmd>MaximizerToggle<CR>


let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" LaTeX live preview
let g:livepreview_previewer = 'okular'
"let g:livepreview_engine = 'pdflatex -shell-escape'

" python paths
let g:python_host_prog = '/usr/bin/python'
let g:python3_host_prog = '/usr/bin/python3'

" command prompt
let g:editcommand_prompt = ':'


lua << EOF
  require("which-key").setup {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  }
EOF

" tell it to use an undo file
set undofile
" set a directory to store the undo history
set undodir=~/.vimundo/

" Ctrl-s
nmap <C-s> :up<CR>
vmap <C-s> <ESC>:up<CR>gv
imap <C-s> <C-o>:up<CR>

" Ctrl-k Ctrl-u
inoremap <C-k> <C-o>dg_
inoremap <C-u> <C-o>d^

" Ctrl-Up Ctrl-Down move paragraph
inoremap <C-Up> <C-o>{
nnoremap <C-Up> {
vnoremap <C-Up> {
inoremap <C-Down> <C-o>}
nnoremap <C-Down> }
vnoremap <C-Down> }


" delete words in insert mode
inoremap <C-BS> <C-W>
inoremap <C-Del> <C-o>dw

" terminal mappings
tnoremap <C-g> <C-\><C-n>
tnoremap <ESC>: <C-\><C-n>:

" Make click on terminal pane enter terminal mode
if has('nvim')
    augroup terminal_setup | au!
        autocmd TermOpen * nnoremap <buffer><LeftRelease> <LeftRelease>i
        " more stuff
    augroup end
endif

" Automatically enter terminal mode when switching to a terminal pane
autocmd BufEnter,BufWinEnter,WinEnter,FocusGained,TermOpen term://* startinsert
"
" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" indentation in Visual mode
vnoremap <S-Tab> <gv
vnoremap <Tab> >gv

" backspace delete in visual mode
vnoremap <BS> <Del>

" powerline fonts
let g:airline_powerline_fonts = 1

" Colorscheme
colorscheme base16-solarized-dark
let g:airline_theme = 'base16'


" folding settings
set foldmethod=indent   "fold based on indentation
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default

" X11 clipboard
if exists('$DISPLAY')
    set clipboard=unnamedplus
endif

" Line highlighting
set cpoptions+=$
set ruler
set cursorline

" Turn on line numbering
set relativenumber
set number

" Relative and absolute numbering autotoggle
autocmd InsertEnter * :set norelativenumber
autocmd InsertLeave * :set relativenumber

set ttimeoutlen=10
augroup FastEscape
    autocmd!
    autocmd InsertEnter * set timeoutlen=0
    autocmd InsertLeave * set timeoutlen=1000
augroup END

" Highlight active pane background
hi ActiveWindow ctermbg=8
hi InactiveWindow ctermbg=NONE
set winhighlight=Normal:ActiveWindow,NormalNC:InactiveWindow
autocmd FocusGained * hi ActiveWindow ctermbg=8
autocmd FocusLost * hi ActiveWindow ctermbg=NONE

" Restore tmux background color on exit
if exists('$TMUX')
    autocmd VimLeave * !tmux set window-active-style fg=default,bg=colour8
endif

" Automatically re-read file every second
set autoread
set updatetime=1000
autocmd CursorHold * call Timer()
function! Timer()
  call feedkeys("f\e")
  " K_IGNORE keycode does not work after version 7.2.025)
  " there are numerous other keysequences that you can use
  checktime
endfunction

" Fix vim tmux navigator in nersdtree
let g:NERDTreeMapJumpPrevSibling=""
let g:NERDTreeMapJumpNextSibling=""

" Syntax highlighting on
syntax on
filetype plugin indent on
set modeline

" TODO maybe change this to use some sort of ftplugin, maybe polyglot?
" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab

" vim: set ft=vim :
